-------------------------------------------------------------------------------------------
-- 프로시저명 : ORG_USER_LIST_TREE
-- 작성자     : 장윤호	
-- 작성일     : 2017-03-28
-- 설명       : 전사조직도 사용자 트리 리스트
-- 예문       : CALL TYJINFWLIB.ORG_USER_LIST_TREE ('ko', 'SEOHAN')
-- DB2 변환   : 
-------------------------------------------------------------------------------------------
--DROP PROCEDURE TYJINFWLIB.ORG_USER_LIST_TREE;
CREATE PROCEDURE TYJINFWLIB.ORG_USER_LIST_TREE 
(
		P_LANGCD			VARCHAR(10)
	,	P_COMPANYCODE		VARCHAR(10)
)
	RESULT SETS 1
	LANGUAGE SQL
	SET OPTION
	ALWCPYDTA = *OPTIMIZE
M1: BEGIN 
	S1 : BEGIN
		DECLARE REFCURSOR CURSOR WITH RETURN FOR
	
		WITH CTE (COMPANYCODE, PARENTDEPTCODE, DEPTCODE, DEPTORDER, DEPTLEVEL, ORGLEVEL, DISPLAYNAME, ORGSORT, DIFF) AS (
			SELECT
					C.COMPANYCODE					-- 법인코드
				,	'' AS PARENTDEPTCODE			-- 부모 부서코드
				,	C.COMPANYCODE AS DEPTCODE		-- 부서코드
				,	C.COMPANYCODE AS DEPTORDER		-- 부서 정렬 순서
				,	CAST(NULL AS INTEGER) AS DEPTLEVEL
				,	CAST(NULL AS INTEGER) AS ORGLEVEL
				,	CASE
						WHEN COALESCE(CL.COMPANY, '') = ''
						THEN CL_KO.COMPANY
						ELSE CL.COMPANY END AS DISPLAYNAME
				,	1 AS ORGSORT
				,	1 AS DIFF
			FROM
					ORG_COMPANY AS C
					LEFT OUTER JOIN ORG_COMPANYLANG AS CL
						ON	C.COMPANYCODE			= CL.COMPANYCODE
						AND	CL.LANGUAGECODE			= P_LANGCD
					LEFT OUTER JOIN ORG_COMPANYLANG AS CL_KO
						ON	C.COMPANYCODE			= CL_KO.COMPANYCODE
						AND	CL_KO.LANGUAGECODE		= 'ko'
			WHERE
					C.COMPANYCODE	= P_COMPANYCODE

			UNION ALL
		
			SELECT
					D.COMPANYCODE
				,	D.PARENTDEPTCODE
				,	D.DEPTCODE
				,	D.DEPTORDER
				,	D.DEPTLEVEL
				,	D.ORGLEVEL
				,	D.DISPLAYNAME
				,	ORGSORT + 1 AS ORGSORT
				,	D.ORGLEVEL - C.ORGLEVEL  AS DIFF
			FROM
					CTE AS C
					INNER JOIN ORG_DEPT AS D
						ON 	C.DEPTCODE    			 =D.PARENTDEPTCODE
						AND COALESCE(D.DPARTNER, 0) <> '1'
						AND D.DISPLAYYN    			= 'Y'
						AND D.COMPANYCODE 			= P_COMPANYCODE
		),
		LIST AS (
			SELECT 
					C.COMPANYCODE
				,	C.DEPTCODE
				,	C.PARENTDEPTCODE
				,	C.DISPLAYNAME AS DEPTNAME
				,	U.EMPID
				,	U.USERNAME
				,	U.DUTYNAME
				,	U.RANKNAME
				,	U.USERIMAGE
				,	U.TEAMCHIEFYN
				,	C.ORGLEVEL
				,	C.ORGSORT
				,	C.DIFF
				,	U.ADDJOB
				,	C.DEPTORDER
				,	DENSE_RANK() OVER (PARTITION BY C.DEPTCODE ORDER BY U.DSORTNO ASC, U.RSORTNO ASC) AS RO
				,	ROW_NUMBER() OVER (ORDER BY C.ORGSORT ASC, C.DEPTORDER ASC, COALESCE(U.DSORTNO, 99999), COALESCE(U.RSORTNO, 99999), C.ORGLEVEL, U.EMPID ASC) AS ROW_NO
			FROM
					CTE AS C
					LEFT OUTER JOIN (	SELECT
												U.COMPANYCODE
											,	U.EMPID
											,	U.DISPLAYNAME AS USERNAME
											,	U.MAINDEPTCODE
											,	U.DUTYCODE
											,	D.DUTYNAME
											,	COALESCE(D.SORTNO, 99999) AS DSORTNO
											,	U.RANKCODE
											,	R.RANKNAME
											,	COALESCE(R.SORTNO, 99999) AS RSORTNO 
											,	'' AS USERIMAGE
											,	D.TEAMCHIEFYN
											,	'0' AS ADDJOB
										FROM
												ORG_USER AS U
												LEFT OUTER JOIN ORG_DUTY AS D
													ON 	U.DUTYCODE  	= D.DUTYCODE
													AND D.LANGCODE  	= P_LANGCD	
												LEFT OUTER JOIN ORG_RANK AS R
													ON 	U.RANKCODE  	= R.RANKCODE
													AND R.LANGCODE  	= P_LANGCD
										WHERE
												U.COMPANYCODE  	= P_COMPANYCODE
										AND  	U.DISPLAYYN  	= 'Y'
										AND		U.ONSITE IS NULL
								
										UNION ALL
								
										SELECT
												U.COMPANYCODE
											,	U.EMPID
											,	U.DISPLAYNAME AS USERNAME
											,	A.DEPTCODE AS MAINDEPTCODE
											,	A.DUTYCODE
											,	D.DUTYNAME
											,	COALESCE(D.SORTNO, 99999) AS DSORTNO
											,	A.RANKCODE
											,	R.RANKNAME
											,	COALESCE(R.SORTNO, 99999) AS RSORTNO 
											,	'' AS USERIMAGE
											,	D.TEAMCHIEFYN
											,	'1' AS ADDJOB	
										FROM
												ORG_ADDITIONALJOB AS A
												INNER JOIN ORG_USER AS U
													ON 	A.EMPID   		= U.EMPID
													AND U.DISPLAYYN  	= 'Y'	
													AND A.COMPANYCODE	= P_COMPANYCODE
													--AND U.COMPANYCODE	= P_COMPANYCODE
												LEFT OUTER JOIN ORG_DUTY AS D
													ON 	A.DUTYCODE  	= D.DUTYCODE
													AND D.LANGCODE  	= P_LANGCD
												LEFT OUTER JOIN ORG_RANK AS R
													ON 	A.RANKCODE  	= R.RANKCODE
													AND R.LANGCODE  	= P_LANGCD
										WHERE
												A.COMPANYCODE 	= P_COMPANYCODE
									) AS U
						--ON	C.DEPTCODE	= U.MAINDEPTCODE
						ON  COALESCE(C.DEPTCODE,'')	= CASE WHEN COALESCE(U.MAINDEPTCODE,'') = '' THEN P_COMPANYCODE ELSE U.MAINDEPTCODE END
			WHERE
					C.PARENTDEPTCODE IS NOT NULL
		)
		SELECT * FROM (
			SELECT DISTINCT
					M.COMPANYCODE
				,	M.DEPTORDER
				,	TRIM(M.DEPTCODE) AS DEPTCODE
				,	CASE 
						WHEN TRIM(M.DEPTCODE) = '030000'
						THEN '010000'
						ELSE TRIM(M.PARENTDEPTCODE) 
						END AS PARENTDEPTCODE
				,	CASE
						WHEN (M.DIFF = 1)
						THEN M.DEPTNAME
						ELSE (	SELECT
										DL.DEPTNAME
								FROM
										ORG_DEPTLANG AS DL 
								WHERE
										DL.LANGCODE			= P_LANGCD
								AND 	DL.DEPTCODE 		= M.DEPTCODE
								AND 	DL.COMPANYCODE 		= M.COMPANYCODE)
						END AS DEPTNAME
				,	M.EMPID	
				,	M.USERNAME
				,	M.DUTYNAME
				,	M.RANKNAME
				,	M.USERIMAGE
				,	M.TEAMCHIEFYN
				,	CASE
						WHEN (M.COMPANYCODE = 'PLANNING' AND M.ORGSORT > 1 AND M.RO > 1)
						THEN M.ORGLEVEL + 1
						ELSE M.ORGLEVEL
						END AS ORGLEVEL
				,	CASE
						WHEN TRIM(M.DEPTCODE) = 'PLANNING' AND M.ORGSORT = 3 THEN 5 --M.ORGSORT
						WHEN TRIM(M.DEPTCODE) = 'KTBCBA'  THEN 4 --M.ORGSORT
						ELSE M.ORGSORT
						END AS ORGSORT
				,	CASE
						WHEN M.DEPTCODE = 'KTBCBA' THEN 2
						WHEN M.ORGSORT > 2 THEN 1
						ELSE 1
						END AS DIFF
				,	M.ADDJOB
				,	CAST(M.RO AS INTEGER) AS RO
				--,	CAST(M.ROW_NO AS INTEGER) AS ROW_NO
			FROM
					LIST AS M
			WHERE
				M.RO 			= 1
				AND COALESCE(M.EMPID,'') <> '000000'
				AND M.DEPTCODE <> 'FBDBBA' 
				AND M.DEPTCODE <> 'FBDCBA'
				AND M.DEPTCODE <> 'FBABAA' 
				AND M.DEPTCODE <> 'CADAAA' ) A
		ORDER BY ORGSORT ASC, DEPTORDER ASC
		;
		OPEN REFCURSOR;
	END S1;
END M1;